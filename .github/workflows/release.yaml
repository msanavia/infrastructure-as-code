name: "Module Release"

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  detect-changed-modules:
    name: Detect changed modules
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set-matrix
        run: |
          # Find top-level module directories that changed under /modules/
          chANGED=$(git diff --dirstat=files,0 HEAD^ HEAD | awk '{print $2}' | cut -d/ -f2 | sort -u)
          MODULES=()
          for m in $CHANGED; do
            if [ -d "modules/$m" ]; then
              MODULES+=("\"$m\"")
            fi
          done

          if [ ${#MODULES[@]} -eq 0 ]; then
            echo "matrix={\"module\":[]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"module\":[${MODULES[*]}]}" >> $GITHUB_OUTPUT
          fi

  release:
    name: Release modules
    needs: detect-changed-modules
    if: ${{ needs.detect-changed-modules.outputs.matrix != '{"module":[]}' && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changed-modules.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine next semantic version for ${{ matrix.module }}
        id: versioning
        run: |
          MOD="${{ matrix.module }}"
          cd modules/$MOD

          # Get the latest version tag for this module (e.g. core/v0.2.4)
          LATEST=$(git tag --list "$MOD/v*" | sort -V | tail -n1)
          echo "Latest tag: $LATEST"

          if [ -z "$LATEST" ]; then
            BASE_VER="0.0.0"
          else
            BASE_VER=${LATEST#"$MOD/v"}
          fi

          # Find commits since the last tag that affected this module
          if [ -z "$LATEST" ]; then
            COMMITS=$(git log --oneline -- modules/$MOD)
          else
            COMMITS=$(git log --oneline "$LATEST"..HEAD -- modules/$MOD)
          fi

          echo "Commits affecting this module:"
          echo "$COMMITS"

          # Determine bump type
          PR_TITLE="${{ github.event.pull_request.title }}"
          BUMP=""
          if echo "$PR_TITLE" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$PR_TITLE" | grep -qE "^.*feat(\(|:)" ; then
            BUMP="minor"
          elif echo "$PR_TITLE" | grep -qE "^.*(fix|chore)(\(|:)" ; then
            BUMP="patch"
          fi

          if [ -z "$BUMP" ]; then
            echo "No relevant PR title (feat/fix/chore/BREAKING CHANGE) found â€” skipping release."
            echo "skip_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Bump type: $BUMP"

          # Parse version
          IFS='.' read -r MAJ MIN PATCH <<< "$BASE_VER"

          case $BUMP in
            major)
              MAJ=$((MAJ + 1))
              MIN=0
              PATCH=0
              ;;
            minor)
              MIN=$((MIN + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Set next version (start from 0.0.1)
          if [ "$BASE_VER" = "0.0.0" ]; then
            NEXT="0.0.1"
          else
            NEXT="$MAJ.$MIN.$PATCH"
          fi

          echo "Next version: $NEXT"

          echo "module=$MOD" >> $GITHUB_OUTPUT
          echo "version=$NEXT" >> $GITHUB_OUTPUT

      - name: Skip if no relevant commits
        if: steps.versioning.outputs.skip_release == 'true'
        run: echo "Skipping release for ${{ matrix.module }}"

      - name: Create tag and release for module
        if: steps.versioning.outputs.skip_release != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MOD="${{ steps.versioning.outputs.module }}"
          VER="${{ steps.versioning.outputs.version }}"
          TAG="$MOD/v$VER"

          echo "Creating tag $TAG..."
          git tag -a $TAG -m "$MOD version $VER"
          git push origin $TAG

          echo "Creating GitHub Release..."
          gh release create $TAG \
            --title "$MOD v$VER" \
            --notes "Automated release for module $MOD version $VER" \
            modules/$MOD/*.tf
